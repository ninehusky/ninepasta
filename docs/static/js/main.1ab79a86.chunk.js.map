{"version":3,"sources":["components/RegisterForm.js","pages/Register.js","components/LogoutButton.js","components/Navbar.js","components/Footer.js","components/LoginForm.js","pages/Login.js","pages/Landing.js","pages/Playground.js","components/EntryRow.js","components/EntryTable.js","pages/Glossary.js","components/EntryForm.js","pages/CreateEntry.js","components/UpdateEntryRow.js","components/UpdateTable.js","pages/Profile.js","App.js","index.js"],"names":["RegisterSchema","Yup","shape","username","min","max","matches","required","password","confirm","oneOf","RegisterForm","history","useHistory","React","useState","showPassword","setShowPassword","handleShowPass","apiError","m","p","as","initialValues","validationSchema","onSubmit","values","actions","a","fetch","method","headers","Accept","body","JSON","stringify","response","ok","json","message","console","log","push","isSubmitting","spacing","status","name","field","form","isInvalid","errors","touched","htmlFor","id","placeholder","size","pr","type","width","h","onClick","mt","colorScheme","isLoading","Register","maxW","LogoutButton","logout","credentials","error","Navbar","useColorMode","colorMode","toggleColorMode","setBody","location","useLocation","useEffect","to","color","fontWeight","_hover","align","justify","wrap","padding","height","mb","paddingLeft","paddingRight","mr","letterSpacing","ml","fontSize","Moon","Sun","orientation","Footer","href","LoginSchema","LoginForm","validateOnChange","validateOnBlur","Login","Landing","heroColor","useColorModeValue","backgroundColor","paddingTop","marginTop","justifyContent","justifyItems","marginBottom","Playground","plaintext","setPlainText","loading","setLoading","table","setTable","bg","onChange","e","inputValue","target","value","words","split","result","word","i","length","emoji","emojify","isDisabled","EntryRow","props","absurdity","description","update","delete","EntryTable","leftIcon","map","entry","index","Glossary","EntryForm","EntrySchema","RegExp","CreateEntry","toast","useToast","title","duration","isClosable","UpdateEntryRow","onOpen","UpdateTable","useDisclosure","isOpen","onClose","setEntry","deleting","setDeleting","loadTable","userId","deleteEntry","_id","operation","Profile","setName","setId","maxWidth","App","basename","process","theme","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ab79a86.chunk.js","sourcesContent":["import {\n  Input,\n  Container,\n  Stack,\n  Button,\n  Center,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  InputGroup,\n  InputRightElement,\n  Alert,\n  AlertIcon,\n  FormHelperText,\n  Heading,\n  VStack,\n  Text,\n  Divider,\n} from '@chakra-ui/react';\nimport { Formik, Form, Field } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\n\nconst RegisterSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(5, 'Username must be at least 5 characters!')\n    .max(20, 'Username must be at most 20 characters!')\n    .matches(\n      /^[A-Za-z0-9]+$/,\n      'Username must contain only alphanumeric characters'\n    )\n    .required('Please enter a username.'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters')\n    .max(100, 'Password must be at most 100 characters')\n    .matches(\n      /^[\\x00-\\x7F]+$/,\n      'Password should only consist of letters, numbers, and special chars'\n    )\n    .required('Please enter a password.'),\n  confirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match!')\n    .required('Please confirm your password.'),\n});\n\nconst RegisterForm = () => {\n  const history = useHistory();\n  const [showPassword, setShowPassword] = React.useState(false);\n  const handleShowPass = () => setShowPassword(!showPassword);\n\n  let apiError = null;\n\n  return (\n    <Container m={5} p={10}>\n      <Center>\n        <VStack>\n          <Heading as=\"h1\">Sign Up</Heading>\n          <Text as=\"h2\">It's quick and easy.</Text>\n        </VStack>\n      </Center>\n      <Divider m={5} />\n      <Formik\n        initialValues={{ username: '', password: '' }}\n        validationSchema={RegisterSchema}\n        onSubmit={async (values, actions) => {\n          try {\n            const response = await fetch(\n              'https://ninepasta.herokuapp.com/users',\n              {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                  username: values.username,\n                  password: values.password,\n                }),\n              }\n            );\n            if (!response.ok) {\n              const json = await response.json();\n              apiError = json.message;\n              console.log(apiError);\n            } else {\n              apiError = null;\n            }\n            history.push('/');\n          } catch (err) {\n            apiError = 'There was an error.';\n          }\n        }}\n      >\n        {({ values, isSubmitting }) => (\n          <Form>\n            <Stack spacing={4}>\n              {apiError ? (\n                <Alert status=\"error\">\n                  <AlertIcon />\n                  {apiError}\n                </Alert>\n              ) : null}\n              <Field name=\"username\">\n                {({ field, form }) => (\n                  <FormControl\n                    isInvalid={form.errors.username && form.touched.username}\n                  >\n                    <FormLabel htmlFor=\"username\">Username</FormLabel>\n                    <Input {...field} id=\"username\" placeholder=\"Username\" />\n                    <FormErrorMessage>{form.errors.username}</FormErrorMessage>\n                    <FormHelperText>\n                      Username should consist of 5-20 alphanumeric characters.\n                    </FormHelperText>\n                  </FormControl>\n                )}\n              </Field>\n              <Field name=\"password\">\n                {({ field, form }) => (\n                  <FormControl\n                    isInvalid={form.errors.password && form.touched.password}\n                  >\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                    <InputGroup size=\"md\">\n                      <Input\n                        {...field}\n                        id=\"password\"\n                        pr=\"4.5rem\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Enter password\"\n                      />\n                      <InputRightElement width=\"4.5rem\">\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowPass}>\n                          {showPassword ? 'Hide' : 'Show'}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                    <FormHelperText>\n                      Password should be at least 8 characters long.\n                    </FormHelperText>\n                    <FormErrorMessage>{form.errors.password}</FormErrorMessage>\n                  </FormControl>\n                )}\n              </Field>\n              <Field name=\"confirm\">\n                {({ field, form }) => (\n                  <FormControl\n                    isInvalid={form.errors.confirm && form.touched.confirm}\n                  >\n                    <FormLabel htmlFor=\"password\">Confirm Password</FormLabel>\n                    <InputGroup size=\"md\">\n                      <Input\n                        {...field}\n                        id=\"confirm\"\n                        pr=\"4.5rem\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Confirm password\"\n                      />\n                      <InputRightElement width=\"4.5rem\">\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowPass}>\n                          {showPassword ? 'Hide' : 'Show'}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                    <FormHelperText>\n                      We'll never ask you for your password ever.\n                    </FormHelperText>\n                    <FormErrorMessage>{form.errors.confirm}</FormErrorMessage>\n                  </FormControl>\n                )}\n              </Field>\n              <Button\n                mt={4}\n                colorScheme=\"teal\"\n                isLoading={isSubmitting}\n                type=\"submit\"\n                onClick={() => console.log(values)}\n              >\n                Submit\n              </Button>\n            </Stack>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default RegisterForm;\n","import { Center, Container, Heading } from '@chakra-ui/react';\nimport React from 'react';\nimport RegisterForm from '../components/RegisterForm';\n\nconst Register = () => (\n  <Container maxW=\"container.lg\" mt={5}>\n    <Center>\n      <RegisterForm />\n    </Center>\n  </Container>\n);\n\nexport default Register;\n","import React from 'react';\nimport { Button } from '@chakra-ui/react';\nimport { useHistory } from 'react-router-dom';\n\nconst LogoutButton = () => {\n  const history = useHistory();\n\n  const logout = async () => {\n    const response = await fetch(\n      'https://ninepasta.herokuapp.com/users/logout',\n      {\n        method: 'POST',\n        credentials: 'include',\n      }\n    );\n    if (!response.ok) {\n      console.error(response);\n    }\n    const json = await response.json();\n    history.push('/');\n  };\n\n  return (\n    <Button colorScheme=\"facebook\" onClick={logout}>\n      Log out\n    </Button>\n  );\n};\n\nexport default LogoutButton;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  HStack,\n  useColorMode,\n  Text,\n  Divider,\n} from '@chakra-ui/react';\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport LogoutButton from './LogoutButton';\n\nconst Navbar = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  let [body, setBody] = useState(null);\n  let location = useLocation();\n\n  useEffect(async () => {\n    let response;\n    try {\n      response = await fetch('https://ninepasta.herokuapp.com/users/me', {\n        credentials: 'include',\n      });\n    } catch (err) {}\n    if (!response) {\n      setBody(\n        <HStack spacing={3}>\n          <Link to=\"/login\">\n            <Button>Log in</Button>\n          </Link>\n          <Link to=\"/register\">\n            <Button colorScheme=\"teal\">Sign up</Button>\n          </Link>\n        </HStack>\n      );\n    } else {\n      response = await response.json();\n      setBody(\n        <HStack spacing={3}>\n          <Text color=\"tomato\">\n            <Link to=\"/me\">\n              <Text fontWeight=\"bold\" _hover={{ fontWeight: 'extrabold' }}>\n                {response.name}\n              </Text>\n            </Link>\n          </Text>\n          <LogoutButton />\n        </HStack>\n      );\n    }\n  }, [location]);\n\n  return (\n    <Flex\n      as=\"nav\"\n      align=\"center\"\n      justify=\"space-between\"\n      wrap=\"wrap\"\n      padding={6}\n      height=\"5vh\"\n      mb=\"5vh\"\n      paddingLeft=\"20vh\"\n      paddingRight=\"20vh\"\n    >\n      <Flex align=\"center\" mr={5}>\n        <Link to=\"/\">\n          <Heading as=\"h1\" size=\"lg\" letterSpacing=\"tight\">\n            ninepasta!\n          </Heading>\n        </Link>\n        <HStack spacing={3} ml={10}>\n          <Link to=\"/playground\">\n            <Text fontSize=\"lg\" _hover={{ fontWeight: 'extrabold' }}>\n              playground\n            </Text>\n          </Link>\n          <Link to=\"/glossary\">\n            <Text fontSize=\"lg\" _hover={{ fontWeight: 'extrabold' }}>\n              glossary\n            </Text>\n          </Link>\n        </HStack>\n      </Flex>\n      <HStack spacing={3} height=\"5vh\">\n        <Box onClick={toggleColorMode}>\n          {colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\n        </Box>\n        <Divider orientation=\"vertical\" />\n        <Box>{body}</Box>\n      </HStack>\n    </Flex>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { Link, Flex, Heading, HStack, Stack, Text } from '@chakra-ui/react';\nimport { FaGithubAlt, FaTwitter } from 'react-icons/fa';\nimport { FiMail } from 'react-icons/fi';\n\nconst Footer = () => {\n  return (\n    <Flex\n      as=\"footer\"\n      align=\"center\"\n      justify=\"space-between\"\n      wrap=\"wrap\"\n      padding={6}\n    >\n      <Stack align=\"center\" mr={5}>\n        <Link href=\"https://ninehusky.github.io\">\n          <Heading as=\"h4\" size=\"md\">\n            &copy; nine media\n          </Heading>\n        </Link>\n      </Stack>\n      <HStack align=\"center\" mr={5} spacing={5}>\n        <Text as=\"sub\">made with love in portland, oregon</Text>\n        <Link href=\"https://github.com/ninehusky\">\n          <FaGithubAlt size={25} />\n        </Link>\n        <Link href=\"https://twitter.com/ninedawg\">\n          <FaTwitter size={25} />\n        </Link>\n        <Link href=\"mailto:acheung8@uw.edu\">\n          <FiMail size={25} />\n        </Link>\n      </HStack>\n    </Flex>\n  );\n};\n\nexport default Footer;\n","import {\n  Input,\n  Container,\n  Stack,\n  Button,\n  Center,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  InputGroup,\n  InputRightElement,\n  Alert,\n  AlertIcon,\n  Heading,\n  VStack,\n  Text,\n  Divider,\n} from '@chakra-ui/react';\nimport { Formik, Form, Field } from 'formik';\nimport React from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst LoginSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(5, 'Username must be at least 5 characters!')\n    .max(20, 'Username must be at most 20 characters!')\n    .matches(\n      /^[A-Za-z0-9]+$/,\n      'Username must contain only alphanumeric characters'\n    )\n    .required('Please enter a username.'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters')\n    .max(100, 'Password must be at most 100 characters')\n    .matches(\n      /^[\\x00-\\x7F]+$/,\n      'Password should only consist of letters, numbers, and special chars'\n    )\n    .required('Please enter a password.'),\n});\n\nconst LoginForm = () => {\n  const history = useHistory();\n  const [showPassword, setShowPassword] = React.useState(false);\n  const handleShowPass = () => setShowPassword(!showPassword);\n\n  let apiError = null;\n\n  return (\n    <Container m={5} p={10}>\n      <Center>\n        <VStack>\n          <Heading as=\"h1\">Log in</Heading>\n          <Text as=\"h2\">Don't have an account?</Text>\n          <Link to=\"/register\">Sign up!</Link>\n        </VStack>\n      </Center>\n      <Divider m={5} />\n      <Formik\n        validateOnChange={false}\n        validateOnBlur={false}\n        initialValues={{ username: '', password: '' }}\n        validationSchema={LoginSchema}\n        onSubmit={async (values, actions) => {\n          try {\n            const response = await fetch(\n              'https://ninepasta.herokuapp.com/users/login',\n              {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n                body: JSON.stringify({\n                  username: values.username,\n                  password: values.password,\n                }),\n              }\n            );\n            const json = await response.json();\n            if (!response.ok) {\n              apiError = json.message;\n              console.log(apiError);\n            } else {\n              console.log(json);\n              apiError = null;\n            }\n          } catch (err) {\n            apiError = 'There was an error.';\n          }\n          history.push('/');\n        }}\n      >\n        {({ values, isSubmitting }) => (\n          <Form>\n            <Stack spacing={4}>\n              {apiError ? (\n                <Alert status=\"error\">\n                  <AlertIcon />\n                  {apiError}\n                </Alert>\n              ) : null}\n              <Field name=\"username\">\n                {({ field, form }) => (\n                  <FormControl\n                    isInvalid={form.errors.username && form.touched.username}\n                  >\n                    <FormLabel htmlFor=\"username\">Username</FormLabel>\n                    <Input {...field} id=\"username\" placeholder=\"Username\" />\n                    <FormErrorMessage>{form.errors.username}</FormErrorMessage>\n                  </FormControl>\n                )}\n              </Field>\n              <Field name=\"password\">\n                {({ field, form }) => (\n                  <FormControl\n                    isInvalid={form.errors.password && form.touched.password}\n                  >\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                    <InputGroup size=\"md\">\n                      <Input\n                        {...field}\n                        id=\"password\"\n                        pr=\"4.5rem\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Enter password\"\n                      />\n                      <InputRightElement width=\"4.5rem\">\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowPass}>\n                          {showPassword ? 'Hide' : 'Show'}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                    <FormErrorMessage>{form.errors.password}</FormErrorMessage>\n                  </FormControl>\n                )}\n              </Field>\n              <Button\n                mt={4}\n                colorScheme=\"teal\"\n                isLoading={isSubmitting}\n                type=\"submit\"\n                onClick={() => console.log(values)}\n              >\n                Log In\n              </Button>\n            </Stack>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default LoginForm;\n","import { Center, Container, Heading } from '@chakra-ui/react';\nimport React from 'react';\nimport LoginForm from '../components/LoginForm';\n\nconst Login = () => (\n  <Container maxW=\"container.lg\" mt={5}>\n    <Center>\n      <LoginForm />\n    </Center>\n  </Container>\n);\n\nexport default Login;\n","import {\n  Box,\n  Container,\n  Heading,\n  Button,\n  Center,\n  Divider,\n  Text,\n  HStack,\n  useColorModeValue,\n  Stack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { FaArrowDown } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\nconst Landing = () => {\n  const heroColor = useColorModeValue('gray.300', 'gray.700');\n  return (\n    <>\n      <Box width=\"100%\" height=\"90vh\" backgroundColor={heroColor}>\n        <Container maxW=\"container.lg\" paddingTop=\"20vh\">\n          <HStack\n            spacing={10}\n            marginTop={10}\n            justifyContent=\"center\"\n            justifyItems=\"center\"\n          >\n            <Box>\n              <Heading\n                as=\"h1\"\n                size=\"3xl\"\n                letterSpacing=\"tight\"\n                fontWeight=\"extrabold\"\n              >\n                emojipastas made easy.\n              </Heading>\n              <Heading as=\"h2\" size=\"md\">\n                a nine radio project\n              </Heading>\n            </Box>\n            <Text fontSize=\"xl\">\n              ninepasta uses cutting-edge technology to host the world's first\n              full-stack repository of word-emoji pairs.\n            </Text>\n          </HStack>\n          <Center marginTop={100} marginBottom={10}>\n            <Link to=\"/playground\">\n              <Button size=\"lg\">Get Started</Button>\n            </Link>\n          </Center>\n          <Center marginTop=\"15%\" marginBottom={7}>\n            <Text as=\"sub\">scroll down</Text>\n          </Center>\n          <Center>\n            <FaArrowDown size={30} />\n          </Center>\n        </Container>\n      </Box>\n      <Box width=\"100%\" height=\"30vh\" paddingTop=\"5vh\">\n        <Container maxW=\"container.lg\">\n          <Center mb=\"10\">\n            <Heading as=\"h1\">What is an emojipasta?</Heading>\n          </Center>\n          <Stack>\n            <Text fontSize=\"lg\">\n              an emojipasta is a variation of the copypasta, defined by\n              Wikipedia as “a block of text which is copied and pasted across\n              the internet by individuals through online forums.”\n            </Text>\n            <Text fontSize=\"lg\">\n              type something crazy into our playground and watch your text get\n              seasoned in real time!\n            </Text>\n          </Stack>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default Landing;\n","import React, { useEffect, useState } from 'react';\n\nimport {\n  Box,\n  Container,\n  Heading,\n  Textarea,\n  HStack,\n  Text,\n} from '@chakra-ui/react';\nimport { FaArrowCircleRight } from 'react-icons/fa';\n\nconst Playground = () => {\n  const [plaintext, setPlainText] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [table, setTable] = useState(null);\n\n  useEffect(async () => {\n    const response = await fetch(\n      'https://ninepasta.herokuapp.com/api/v1/entries',\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    const json = await response.json();\n    setTable(json);\n    setLoading(false);\n  }, []);\n\n  const emojify = plaintext => {\n    const words = plaintext.split(/\\s+/);\n    let result = '';\n    for (const word of words) {\n      result += word;\n      for (let i = 0; i < table.length; i++) {\n        if (table[i].word === word) {\n          result += table[i].emoji;\n          break;\n        }\n      }\n      result += ' ';\n    }\n    return result;\n  };\n\n  const handleInputChange = e => {\n    const inputValue = e.target.value;\n    setPlainText(emojify(inputValue));\n  };\n\n  return (\n    <Box width=\"100%\">\n      <Container height=\"80vh\" maxW=\"container.xl\">\n        <Heading as=\"h1\" mb={10}>\n          Playground\n        </Heading>\n        {loading ? <Text>Loading...</Text> : null}\n        <HStack>\n          <Textarea\n            color=\"black\"\n            bg=\"gray.500\"\n            placeholder=\"begin typing here...\"\n            onChange={handleInputChange}\n            height=\"lg\"\n            fontSize=\"xl\"\n          />\n          <FaArrowCircleRight size={60} />\n          <Textarea\n            bg=\"gray.500\"\n            isDisabled\n            placeholder=\"...and watch as your emojified text appears here!\"\n            value={plaintext}\n            height=\"lg\"\n            fontSize=\"xl\"\n          />\n        </HStack>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Playground;\n","import { Tr, Td, Button, HStack } from '@chakra-ui/react';\nimport React from 'react';\n\nconst EntryRow = props => (\n  <Tr>\n    <Td>{props.word}</Td>\n    <Td>{props.emoji}</Td>\n    <Td>{props.absurdity}</Td>\n    <Td>{props.description}</Td>\n    <HStack>\n      {props.update ? <Button id={props.id}>Update</Button> : null}\n      {props.delete ? (\n        <Button colorScheme=\"red\" id={props.id}>\n          Delete\n        </Button>\n      ) : null}\n    </HStack>\n  </Tr>\n);\n\nexport default EntryRow;\n","import { React, useEffect, useState } from 'react';\n\nimport { Table, Thead, Tbody, Tr, Th, Button } from '@chakra-ui/react';\n\nimport EntryRow from './EntryRow';\nimport { BsFillPlusCircleFill } from 'react-icons/bs';\nimport { Link } from 'react-router-dom';\n\nconst EntryTable = () => {\n  const [table, setTable] = useState(null);\n\n  useEffect(async () => {\n    const response = await fetch(\n      'https://ninepasta.herokuapp.com/api/v1/entries',\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    const json = await response.json();\n    setTable(json);\n  }, []);\n\n  return (\n    <Table height=\"30px\">\n      <Thead>\n        <Tr>\n          <Th>word</Th>\n          <Th>emoji</Th>\n          <Th>absurdity</Th>\n          <Th>description</Th>\n        </Tr>\n      </Thead>\n      <Tbody height=\"30px\">\n        <Tr>\n          <Link to=\"/create\">\n            <Button\n              marginTop={5}\n              marginBottom={5}\n              leftIcon={<BsFillPlusCircleFill />}\n              colorScheme=\"teal\"\n            >\n              Create your own entry!\n            </Button>\n          </Link>\n        </Tr>\n        {table\n          ? table.map((entry, index) => {\n              return (\n                <EntryRow\n                  word={entry.word}\n                  emoji={entry.emoji}\n                  absurdity={entry.absurdity}\n                  description={entry.description}\n                  key={index}\n                />\n              );\n            })\n          : null}\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default EntryTable;\n","import { Container, Heading } from '@chakra-ui/react';\nimport React from 'react';\nimport EntryTable from '../components/EntryTable';\n\nconst Glossary = () => {\n  return (\n    <Container maxW=\"container.lg\">\n      <Heading as=\"h1\" mb={3}>\n        Glossary\n      </Heading>\n      <EntryTable />\n    </Container>\n  );\n};\n\nexport default Glossary;\n","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Input,\n  Button,\n  HStack,\n  Select,\n  Alert,\n  AlertIcon,\n  useToast,\n} from '@chakra-ui/react';\n\nimport * as Yup from 'yup';\n\nconst EntryForm = props => {\n  const EntrySchema = Yup.object().shape({\n    word: Yup.string()\n      .min(1)\n      .matches(/^[A-za-z0-9]+$/, 'Word must be exactly one alphanumeric word!')\n      .required('Please enter a word.'),\n    emoji: Yup.string()\n      .matches(new RegExp('^\\\\p{Emoji}$', 'u'), 'You must enter 1 emoji!')\n      .required('Please enter an emoji.'),\n    absurdity: Yup.string().required('Please select an absurdity rating'),\n    description: Yup.string()\n      .min(10, 'Your description should be at least 10 characters')\n      .required('Please enter a description.'),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        word: props.word,\n        emoji: props.emoji,\n        absurdity: props.absurdity,\n        description: props.description,\n      }}\n      validationSchema={EntrySchema}\n      onSubmit={props.onSubmit}\n    >\n      {({ values, isSubmitting }) => (\n        <Form>\n          {props.apiError ? (\n            <Alert status=\"error\">\n              <AlertIcon />\n              {props.apiError}\n            </Alert>\n          ) : null}\n          <Field name=\"word\">\n            {({ field, form }) => (\n              <FormControl\n                isInvalid={form.errors.word && form.touched.word}\n                mb={5}\n              >\n                <FormLabel htmlFor=\"word\">Word</FormLabel>\n                <Input {...field} id=\"word\" placeholder=\"word\" />\n                <FormErrorMessage>{form.errors.word}</FormErrorMessage>\n                <FormHelperText>\n                  The word should be made of alphanumeric characters.\n                </FormHelperText>\n              </FormControl>\n            )}\n          </Field>\n          <HStack mb={5}>\n            <Field name=\"emoji\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.emoji && form.touched.emoji}\n                >\n                  <FormLabel htmlFor=\"emoji\">Emoji</FormLabel>\n                  <Input\n                    {...field}\n                    id=\"word\"\n                    placeholder={props.emoji || '🐶'}\n                  />\n                  <FormErrorMessage>{form.errors.emoji}</FormErrorMessage>\n                  <FormHelperText>Enter one emoji.</FormHelperText>\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"absurdity\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.absurdity && form.touched.absurdity}\n                >\n                  <FormLabel htmlFor=\"absurdity\">Absurdity</FormLabel>\n                  <Select {...field} placeholder=\"Select option\">\n                    <option value=\"concrete\">Concrete</option>\n                    <option value=\"reasonable\">Reasonable</option>\n                    <option value=\"outlandish\">Outlandish</option>\n                  </Select>\n                  <FormErrorMessage>{form.errors.absurdity}</FormErrorMessage>\n                  <FormHelperText>Fill this out!</FormHelperText>\n                </FormControl>\n              )}\n            </Field>\n          </HStack>\n          <Field name=\"description\">\n            {({ field, form }) => (\n              <FormControl\n                isInvalid={form.errors.description && form.touched.description}\n              >\n                <FormLabel htmlFor=\"description\">Description</FormLabel>\n                <Input\n                  {...field}\n                  id=\"description\"\n                  placeholder=\"this emoji pair is...\"\n                />\n                <FormErrorMessage>{form.errors.description}</FormErrorMessage>\n                <FormHelperText>\n                  Description should be at least 10 characters.\n                </FormHelperText>\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt={4}\n            colorScheme=\"teal\"\n            isLoading={isSubmitting}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default EntryForm;\n","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { useToast, Container } from '@chakra-ui/react';\nimport EntryForm from '../components/EntryForm';\n\nconst CreateEntry = () => {\n  let apiError = null;\n  const toast = useToast();\n  const onSubmit = async (values, actions) => {\n    try {\n      const response = await fetch(\n        'https://ninepasta.herokuapp.com/api/v1/entries/',\n        {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n          body: JSON.stringify({\n            word: values.word,\n            emoji: values.emoji,\n            absurdity: values.absurdity,\n            description: values.description,\n          }),\n        }\n      );\n      const json = await response.json();\n      if (!response.ok) {\n        apiError = json.message;\n      } else {\n        console.log(json);\n        apiError = null;\n        toast({\n          title: 'Action completed.',\n          description: 'Thanks for your contribution!',\n          status: 'success',\n          duration: 9000,\n          isClosable: true,\n        });\n      }\n    } catch (err) {\n      apiError = 'There was an error.';\n    }\n  };\n\n  return (\n    <Container>\n      <EntryForm apiError={apiError} onSubmit={onSubmit} />\n    </Container>\n  );\n};\n\nexport default CreateEntry;\n","import {\n  Tr,\n  Td,\n  Button,\n  Text,\n  HStack,\n  Input,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Alert,\n  AlertIcon,\n  Select,\n  FormHelperText,\n} from '@chakra-ui/react';\nimport { Formik, Field, Form } from 'formik';\nimport React from 'react';\n\nimport * as Yup from 'yup';\n\nconst UpdateEntryRow = props => {\n  return (\n    <Tr>\n      <Td>{props.word}</Td>\n      <Td>{props.emoji}</Td>\n      <Td>{props.absurdity}</Td>\n      <Td>{props.description}</Td>\n      <HStack>\n        <Button\n          id={props.id}\n          onClick={() => {\n            props.onOpen('update');\n          }}\n        >\n          Update\n        </Button>\n        <Button\n          colorScheme=\"red\"\n          id={props.id}\n          onClick={() => {\n            props.onOpen('delete');\n          }}\n        >\n          Delete\n        </Button>\n      </HStack>\n    </Tr>\n  );\n};\n\nexport default UpdateEntryRow;\n","import { React, useEffect, useState } from 'react';\n\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Button,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalHeader,\n  ModalContent,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useToast,\n  Text,\n  Stack,\n  Heading,\n  Center,\n} from '@chakra-ui/react';\n\nimport UpdateEntryRow from './UpdateEntryRow';\nimport { BsFillPlusCircleFill } from 'react-icons/bs';\nimport { Link } from 'react-router-dom';\nimport { Field, Form, Formik } from 'formik';\nimport EntryForm from './EntryForm';\n\nconst UpdateTable = props => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [table, setTable] = useState(null);\n  const [entry, setEntry] = useState(null);\n  const [deleting, setDeleting] = useState(false);\n  let apiError = null;\n\n  const loadTable = async () => {\n    const response = await fetch(\n      'https://ninepasta.herokuapp.com/api/v1/entries?userId=' + props.userId,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    const json = await response.json();\n    setTable(json);\n  };\n\n  const deleteEntry = async () => {\n    try {\n      const response = await fetch(\n        `https://ninepasta.herokuapp.com/api/v1/entries/${entry._id}`,\n        {\n          method: 'DELETE',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n        }\n      );\n      const json = await response.json();\n      if (!response.ok) {\n        apiError = json.message;\n      } else {\n        apiError = null;\n        toast({\n          title: 'Entry deleted.',\n          description: 'Thanks for your contribution!',\n          status: 'success',\n          duration: 9000,\n          isClosable: true,\n        });\n        loadTable();\n        onClose();\n      }\n    } catch (err) {\n      apiError = 'There was an error.';\n    }\n  };\n\n  useEffect(loadTable, []);\n\n  const toast = useToast();\n  const onSubmit = async (values, actions) => {\n    try {\n      const response = await fetch(\n        `https://ninepasta.herokuapp.com/api/v1/entries/${entry._id}`,\n        {\n          method: 'PATCH',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n          body: JSON.stringify({\n            word: values.word,\n            emoji: values.emoji,\n            absurdity: values.absurdity,\n            description: values.description,\n          }),\n        }\n      );\n      const json = await response.json();\n      if (!response.ok) {\n        apiError = json.message;\n      } else {\n        apiError = null;\n        toast({\n          title: 'Entry updated.',\n          description: 'Thanks for your contribution!',\n          status: 'success',\n          duration: 9000,\n          isClosable: true,\n        });\n        loadTable();\n        onClose();\n      }\n    } catch (err) {\n      apiError = 'There was an error.';\n    }\n  };\n\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        {!deleting ? (\n          <ModalContent>\n            <ModalHeader>Update Entry</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <EntryForm\n                word={entry?.word}\n                emoji={entry?.emoji}\n                absurdity={entry?.absurdity}\n                description={entry?.description}\n                apiError={apiError}\n                onSubmit={onSubmit}\n              />\n            </ModalBody>\n          </ModalContent>\n        ) : (\n          <ModalContent>\n            <ModalHeader>Delete Entry</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <Center>\n                <Heading as=\"h2\" fontSize=\"md\" mb={5}>\n                  Are you sure you want to delete the following entry?\n                </Heading>\n              </Center>\n              <Stack spacing={2}>\n                <Text>Word: {entry.word}</Text>\n                <Text>Emoji: {entry.emoji}</Text>\n                <Text>Absurdity: {entry.absurdity}</Text>\n                <Text>Description: {entry.description}</Text>\n              </Stack>\n            </ModalBody>\n            <ModalFooter>\n              <Button colorScheme=\"red\" onClick={deleteEntry}>\n                Yes\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        )}\n      </Modal>\n      <Table height=\"30px\">\n        <Thead>\n          <Tr>\n            <Th>word</Th>\n            <Th>emoji</Th>\n            <Th>absurdity</Th>\n            <Th>description</Th>\n          </Tr>\n        </Thead>\n        <Tbody height=\"30px\">\n          <Tr>\n            <Link to=\"/create\">\n              <Button\n                marginTop={5}\n                marginBottom={5}\n                leftIcon={<BsFillPlusCircleFill />}\n                colorScheme=\"teal\"\n              >\n                Create your own entry!\n              </Button>\n            </Link>\n          </Tr>\n          {table\n            ? table.map((entry, index) => {\n                return (\n                  <UpdateEntryRow\n                    word={entry.word}\n                    emoji={entry.emoji}\n                    absurdity={entry.absurdity}\n                    description={entry.description}\n                    id={entry._id}\n                    key={index}\n                    onOpen={operation => {\n                      console.log(operation);\n                      if (operation === 'update') {\n                        setDeleting(false);\n                      } else {\n                        // operation === 'delete'\n                        setDeleting(true);\n                      }\n                      setEntry(entry);\n                      onOpen();\n                    }}\n                  />\n                );\n              })\n            : null}\n        </Tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default UpdateTable;\n","import { Container, Text, Heading } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport UpdateTable from '../components/UpdateTable';\n\nconst Profile = () => {\n  const [name, setName] = useState(null);\n  const [id, setId] = useState(null);\n  const history = useHistory();\n  useEffect(async () => {\n    let response = await fetch('https://ninepasta.herokuapp.com/users/me', {\n      credentials: 'include',\n    });\n    if (!response.ok) {\n      history.push('/');\n    } else {\n      response = await response.json();\n      setName(response.name);\n      setId(response.id);\n    }\n  }, []);\n  return (\n    <Container maxWidth=\"container.lg\">\n      <Heading as=\"h1\">\n        <Text>Hello, {name}!</Text>\n      </Heading>\n      <Heading as=\"h2\">Your entries:</Heading>\n      {id ? <UpdateTable userId={id} /> : null}\n    </Container>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { ChakraProvider, Box, theme } from '@chakra-ui/react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport BrowserRouter from 'react-router-dom/BrowserRouter';\nimport Register from './pages/Register';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Login from './pages/Login';\nimport Landing from './pages/Landing';\nimport Playground from './pages/Playground';\nimport Glossary from './pages/Glossary';\nimport CreateEntry from './pages/CreateEntry';\nimport Profile from './pages/Profile';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <ChakraProvider theme={theme}>\n        <Router>\n          <Box>\n            <Navbar />\n            <Switch>\n              <Route path=\"/register\">\n                <Register />\n              </Route>\n              <Route path=\"/login\">\n                <Login />\n              </Route>\n              <Route path=\"/playground\">\n                <Playground />\n              </Route>\n              <Route path=\"/glossary\">\n                <Glossary />\n              </Route>\n              <Route path=\"/create\">\n                <CreateEntry />\n              </Route>\n              <Route path=\"/me\">\n                <Profile />\n              </Route>\n              <Route path=\"/\">\n                <Landing />\n              </Route>\n            </Switch>\n          </Box>\n        </Router>\n        <Footer />\n      </ChakraProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}